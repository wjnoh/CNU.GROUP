<%= render "templates/navbar" %>
<div class="wrapper">

  <header class="w-100 mb-4" style="background-image: url('http://www.kcbc.or.kr/data/file/freeboard/2038892474_c9634799_pimg_713097184324384.jpg');">
    <div class="container h-100 d-flex flex-column justify-content-center">
      <h2 class="font-weight-thin">시간표</h2>
      <div class="header-sub-message">
        <h5 class="font-weight-thin">UPDATE : 2017.09.25</h5>
      </div>
    </div>
  </header>

  <div class="container">
    <div class="row">

      <div class="col-lg-7 col-12">
        <div>
          <%= form_tag('/timetable', method: :post) do %>
          <table class="" id="timeTable">
            <tr>
              <td></td>
              <% @day.each do |d| %>
              <td id="<%= d %>" >
                <%= d %>
              </td>
              <% end %>
            </tr>
            <% @time.each do |t| %>
            <tr id="<%= t %>">
              <td style="">
                <%= t %>
              </td>
              <% @index.each do |i| %>
              <td class='drop' id='<%= t %><%= i %>' style=""></td>
              <% end %>
            </tr>
            <% end %>
          </table><br>
        </div>
      </div>

      <div class="col-lg-5 col-12">
        <div class="card">

          <div class="card-header">
            <div class="d-flex justify-content-between">
              <input type='text' class='form-control' id='title' name='title' placeholder="시간표 제목" required="true">
              <button type='submit' class='btn btn-outline-primary ml-2' id="checkNill">저장</button>
              <!-- Trigger the modal with a button -->
              <button type="button" class='btn btn-outline-primary ml-2' data-toggle="modal" data-target="#myModal">목록</button>
            </div>
          </div>

          <div class="card-body">
            <div>
              <select id="select" class="form-control mb-2">
                <option>학과 선택</option>
                <option>충남대학교 공과대학</option>
                <option>충남대학교 군사학부</option>
                <option>대학 학과공통</option>
                <option>인문대학 국어국문학과</option>
                <option>인문대학 영어영문학과</option>
                <option>인문대학 독어독문학과</option>
                <option>인문대학 불어불문학과</option>
                <option>인문대학 중어중문학과</option>
                <option>인문대학 일어일문학과</option>
                <option>인문대학 한문학과</option>
                <option>인문대학 언어학과</option>
                <option>인문대학 사학과</option>
                <option>인문대학 국사학과</option>
                <option>인문대학 고고학과</option>
                <option>인문대학 철학과</option>
                <option>사회과학대학 행정학부</option>
                <option>사회과학대학 사회학과</option>
                <option>사회과학대학 문헌정보학과</option>
                <option>사회과학대학 심리학과</option>
                <option>사회과학대학 언론정보학과</option>
                <option>사회과학대학 행정학과</option>
                <option>사회과학대학 정치외교학과</option>
                <option>사회과학대학 자치행정학과</option>
                <option>사회과학대학 사회복지학과</option>
                <option>자연과학대학 수학과</option>
                <option>자연과학대학 물리학과</option>
                <option>자연과학대학 천문우주과학과</option>
                <option>자연과학대학 화학과</option>
                <option>자연과학대학 생화학과</option>
                <option>자연과학대학 무용학과</option>
                <option>자연대 무용학과 한국무용</option>
                <option>자연대 무용학과 현대무용</option>
                <option>자연대 무용학과 발레</option>
                <option>자연과학대학 스포츠과학과</option>
                <option>자연과학대학 정보통계학과</option>
                <option>자연과학대학 지질환경과학과</option>
                <option>자연과학대학 해양환경과학과</option>
                <option>경상대학 아시아비즈니스국제학과</option>
                <option>경상대학 경제학과</option>
                <option>경상대학 무역학과</option>
                <option>경상대학 경영학부</option>
                <option>공과대학 유기재료공학과</option>
                <option>공과대학 전자공학과</option>
                <option>공과대학 선박해양공학과</option>
                <option>공과대학 재료공학과</option>
                <option>공과대학 기계설계공학과</option>
                <option>공과대학 건축학과 (5)</option>
                <option>공과대학 건축공학과</option>
                <option>공과대학 토목공학과</option>
                <option>공과대학 기계공학과</option>
                <option>공과대학 화학공학과</option>
                <option>공과대학 전기공학과</option>
                <option>공과대학 전파정보통신공학과</option>
                <option>공과대학 컴퓨터공학과</option>
                <option>공과대학 신소재공학과</option>
                <option>공과대학 고분자공학과</option>
                <option>공과대학 환경공학과</option>
                <option>공과대학 정보통신공학과</option>
                <option>공과대학 항공우주공학과</option>
                <option>공과대학 메카트로닉스공학과</option>
                <option>공과대학 전파공학과</option>
                <option>공과대학 기계공학부</option>
                <option>공과대학 응용화학공학과</option>
                <option>공과대학 유기소재·섬유시스템공학과</option>
                <option>공과대학 정밀응용화학과</option>
                <option>공과대학 나노소재공학과</option>
                <option>농업생명과학대학 원예학과</option>
                <option>농업생명과학대학 식품공학과</option>
                <option>농업생명과학대학 농업경제학과</option>
                <option>농업생명과학대학 식물자원학과</option>
                <option>농업생명과학대학 동물자원과학부</option>
                <option>농업생명과학대학 산림환경자원학과</option>
                <option>농업생명과학대학 환경소재공학과</option>
                <option>농업생명과학대학 동물자원생명과학과</option>
                <option>농업생명과학대학 동물바이오시스템과학과</option>
                <option>농업생명과학대학 응용생물학과</option>
                <option>농업생명과학대학 생물환경화학과</option>
                <option>농업생명과학대학 지역환경토목학과</option>
                <option>농업생명과학대학 바이오시스템기계공학과</option>
                <option>법과대학 법학부</option>
                <option>약학대학 약학과</option>
                <option>약학대학 제약학과</option>
                <option>의과대학 의예과</option>
                <option>의과대학 의학과</option>
                <option>생활과학대학 의류학과</option>
                <option>생활과학대학 식품영양학과</option>
                <option>생활과학대학 소비자생활정보학과</option>
                <option>예술대학 음악과</option>
                <option>예술대 음악과 성악</option>
                <option>예술대 음악과 작곡</option>
                <option>예술대 음악과 피아노</option>
                <option>예술대학 관현악과</option>
                <option>예술대 관현악과 관악</option>
                <option>예술대 관현악과 현악</option>
                <option>예술대학 회화과</option>
                <option>예술대 회화과 한국화</option>
                <option>예술대 회화과 서양화</option>
                <option>예술대학 조소과</option>
                <option>예술대학 디자인창의학과</option>
                <option>예술대 디자인창의학과 도자ㆍ섬유디자인</option>
                <option>예술대 디자인창의학과 시각ㆍ제품디자인</option>
                <option>수의과대학 수의예과</option>
                <option>수의과대학 수의학과</option>
                <option>사범대학 국어교육과</option>
                <option>사범대학 영어교육과</option>
                <option>사범대학 수학교육과</option>
                <option>사범대학 교육학과</option>
                <option>사범대학 체육교육과</option>
                <option>사범대학 건설공학교육과</option>
                <option>사범대학 기계·금속공학교육과</option>
                <option>사범대학 전기·전자·통신공학교육과</option>
                <option>사범대학 화학공학교육과</option>
                <option>사범대학 기술교육과</option>
                <option>간호대학 간호학과</option>
                <option>생명시스템과학대학 생물과학과</option>
                <option>생명시스템과학대학 미생물분자생명과학과</option>
                <option>자유전공학부 리더십과 조직과학(야간)</option>
                <option>자유전공학부 공공안전학</option>
                <option>자유전공학부 리더십과 조직과학(주간)</option>
                <option>자유전공학부 인문·사회과학</option>
                <option>군사학부 해군학</option>
                <option>군사학부 육군학</option>
                <option>연계대학 연계전공학과 아시아비즈니스</option>
                <option>연계대학 연계전공학과 과채·특용작물영농창업</option>
                <option>연계대학 연계전공학과 스마트이트레이드</option>
                <option>연계대학 연계전공학과 미래기술창업학</option>
                <option>연계대학 연계전공학과 환경ICT</option>
                <option>연계대학 연계전공학과 국제학</option>
                <option>연계대학 연계전공학과 인문콘텐츠</option>
                <option>연계대학 연계전공학과 의약생명학</option>
                <option>연계대학 연계전공학과 국방무인시스템</option>
                <option>연계대학 연계전공학과 통일리더십과개발협력</option>
                <option>연계대학 연계전공학과 도덕.윤리</option>
                <option>연계대학 연계전공학과 목조건축및인테리어디자인</option>
                <option>LINC사업단(대학) 융합공학(부)</option>
                <option>LINC사업단(대학) 의약바이오(부)</option>
              </select>
              <input type="text" class="form-control searchFilter" id="myInput" placeholder="과목명 검색" title="Type in a name">
            </div>
            <% end %>

            <div class="mt-3">
              <div class="d-flex justify-content-between align-items-center">
                <div class="">
                  <label class="custom-control custom-checkbox mb-0">
                    <input type="checkbox" class="custom-control-input" id="weekendShowOrHide">
                    <span class="custom-control-indicator"></span>
                    <span class="custom-control-description">주말</span>
                  </label>
                  <label class="custom-control custom-checkbox mb-0">
                    <input type="checkbox" class="custom-control-input" id="afterSixPmShowOrHide">
                    <span class="custom-control-indicator"></span>
                    <span class="custom-control-description">18시 이후</span>
                  </label>
                </div>

              <button class="btn btn-sm btn-outline-secondary howToUseOn float-right">사용 방법</button>
              <button class="btn btn-sm btn-outline-secondary howToUseOff float-right" style="display:none">사용 방법 접기</button>
              </div>

              <div class="howToUse"></div>
            </div>

          </div>
        </div>

        <table class="table table-filter mt-4" style="font-size:0.9rem;" id="classTable">
          <% for i in 1..(@perfectString.length - 1) %>
          <% @strArray = @perfectString[i].split("_") %>
          <tr data-status="<%= @strArray[0] %>" style="display:none">
            <td class="classInfo" id="<%= @strArray[5] %>" name="<%= @strArray[4] %>">
              <span><%= @strArray[0] %> / </span>
              <span><%= @strArray[1] %> / </span>
              <span><%= @strArray[2] %>학년 / </span>
              <span>학수번호 : <%= @strArray[3] %> <br></span>
              <span style="font-weight: bold; font-size: 15px;"><%= @strArray[4] %></span> /
              <span style="font-weight: bold; font-size: 15px;"><%= @strArray[6] %> <br></span>
              <span><%= @strArray[5] %></span>
            </td>
          </tr>
          <% end %>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- 모달 -->
<div class="modal fade" id="myModal" role="dialog">
  <div class="modal-dialog">
    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title"><span class="">시간표 목록</span></h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <%= render "/timetable/templates/list" %>
      </div>
      <div class="modal-footer">
        <div style="float:right;">
          <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">닫기</button>
        </div>
      </div>
    </div>
  </div>
</div>

<%= render "templates/footer" %>

<%= render "/timetable/jquery.event.drag-2.2" %>
<%= render "/timetable/jquery.event.drag.live-2.2" %>


<script type='text/javascript'>

$(".howToUseOn").on("click",function(){
  $(".howToUse").html(
    "<hr><div class=''>"
    + "1. 셀을 클릭하거나 영역을 드래그해 일정을 등록하거나 삭제할 수 있습니다. <br>"
    + "2. 학과를 선택하거나 직접 과목명을 검색해 일정을 등록할 수도 있습니다. <br>"
    + "3. 시간표를 저장한 후 목록에서 대표 시간표를 설정하면, 가입한 모임 내 그룹원들과 시간표를 공유하고 병합할 수 있습니다."
    + "</div>"
  ).off("click")

  $(this).attr("style","display:none")
  $(".howToUseOff").attr("style","")
})

$(".howToUseOff").on("click", function(){
  $(".howToUse").html("");
  $(this).attr("style","display:none")
  $(".howToUseOn").attr("style","")
})

//시간표 첫 화면에 주말 안보이기 설정.
$(document).ready(function () {
  <% @time[0..18].each do |t| %>
    $("#토").toggle();
    $("#일").toggle();
    $("#<%= t %>" + 6).toggle();
    $("#<%= t %>" + 7).toggle();
  <% end %>

  //시간표 첫 화면에 6시 이후 안보이기 설정.
  <% @time[19..30].each do |t| %>
    <% @index[0..6].each do |i| %>
      $("#<%=t%>").toggle();
      $("#<%=t%><%=i%>").toggle();
    <% end %>
  <% end %>
});


// 시간표 드래그 기능.
$('#timeTable').drag('start', function (ev, dd) {
  return $("<div class='selection' />").css('opacity', .65).appendTo(document.body);
}).drag(function (ev, dd) {
  $(dd.proxy).css({
    top: Math.min(ev.pageY, dd.startY),
    left: Math.min(ev.pageX, dd.startX),
    height: Math.abs(ev.pageY - dd.startY),
    width: Math.abs(ev.pageX - dd.startX)
  });
}).drag('end', function (ev, dd) {
  $(dd.proxy).remove();
});


// 시간표에서 마우스 다운, 업 시 dynamicBinding 실행.
$('.drop').mousedown(function() {
  // 드래그 좌상단(영역이 시작하는 지점) 셀의 위치를 저장
  startPoint = $(this);
  startRowIndex = startPoint.closest('tr').index();
  startColIndex = startPoint.closest('td').index();
}).mouseup(dynamicBinding);


// 시간표 목록 클릭 시 staticBinding 실행.
$(".classInfo").on("click", function () {
  staticBinding.call($(this));
});


// 검색 필터
$(".searchFilter").keyup(function () {
  var input, filter, table, tr, td, i;
  input = document.getElementById("myInput");
  filter = input.value.toUpperCase();
  table = document.getElementById("classTable");
  tr = table.getElementsByTagName("tr");

  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[0];
    if (td) {
      if ($(this).val() == "") {
        tr[i].style.display = "none";
      } else if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }
  }
});


// 일정 선택없이 빈 시간표 저장 방지, 알림.
$("#checkNill").click(function () {
  if (($(".dropped").length) < 1) {
    alert("1개 이상의 일정을 등록하세요.");
    return false;
    throw new Error();
  }
});


// 학과선택
$('#select').change(function () {
  var $target = $('#select option:selected').val();
  $('#classTable tr').css('display', 'none');
  $('#classTable tr[data-status="' + $target + '"]').fadeIn('slow');
});


// 체크박스 클릭 시 주말보기.
$("#weekendShowOrHide").click(function () {
  if ($("#18_30").attr('style') == "display: none;") {
    <% @time[0..18].each do |t| %>
    $("#토").toggle();
    $("#일").toggle();
    $("#<%= t %>" + 6).toggle();
    $("#<%= t %>" + 7).toggle();
    <% end %>
  }
  else {
    <% @time.each do |t| %>
    $("#토").toggle();
    $("#일").toggle();
    $("#<%= t %>" + 6).toggle();
    $("#<%= t %>" + 7).toggle();
    <% end %>
  }
});


// 체크박스 클릭 시 6시 이후 보기.
$("#afterSixPmShowOrHide").click(function () {
  if ($("#토").attr('style') == "display: none;") {
    <% @time[19..30].each do |t| %>
    <% @index[0..4].each do |i| %>
    $("#<%=t%>").toggle();
    $("#<%=t%><%=i%>").toggle();
    <% end %>
    <% end %>
  } else {
    <% @time[19..30].each do |t| %>
    <% @index.each do |i| %>
    $("#<%=t%>").toggle();
    $("#<%=t%><%=i%>").toggle();
    <% end %>
    <% end %>
  }
});


//색상을 담고 있는 배열.
colorArray = [
  "#FFCCCC",
  "#CCE5FF",
  "#E5FFCC",
  "#FFCCE5",
  "#CCFFCC",
  "#CCFFE5",
  "#FFFFCC",
  "#CCFFFF",
  "#FFE5CC",
  "#E5CCFF",
  "#FFCCFF",
  "#CCCCFF",
];
colorArrayIndex = 0;  // 색상 배열에 순차적으로 access하기 위한 인덱스.



function staticBinding() {
  // 클릭한 수업 목록 테이블
  this_td = $(this)

  // 수업 시간 정보가 담겨있는 id값을 가져온 후 "," 기준으로 split (두 요일로 나눠 수업하는 시간표가 있으므로).
  originClassInfo = this_td.attr('id').replace(/:/g, '_');
  firstClassInfo = originClassInfo.split(',')[0];
  secondClassInfo = originClassInfo.split(',')[1];

  // 선택된 수업의 시간표 정보를 변수에 할당
  setFirstClass();
  if (!(typeof secondClassInfo == "undefined")) {
    setSecondClass()
  }

  // 수업을 테이블에 추가하는 경우
  if (!(this_td.is('.dropped'))) {
    // 중복체크 : 수업의 시간표에 대응되는 셀이 이미 다른 일정에 잡혀있는지 확인
    startTimeAndIndex = firstClassStratTime + firstClassDayIndex;
    endTimeAndIndex = firstClassEndTime + firstClassDayIndex;
    checkRepeat()

    if (!(typeof secondClassInfo == "undefined")) {
      startTimeAndIndex = secondClassStratTime + secondClassDayIndex;
      endTimeAndIndex = secondClassEndTime + secondClassDayIndex;
      checkRepeat();
    }

    // 시간표 정보를 담은 originClassInfo에서 ( , ) , ~ ,  ,(쉼표) , (공백) 등을 없앰
    // ex) 월13_30~15_00(교205), 수09_00~10_30(교205)  => 월13_3015_00교205수09_0010_30교205
    tr_id = originClassInfo.replace(/[\(\)~, ]/g, '')

    // 수강목록에서 현재 수업에 dropped클래스 toggle을 추가(추가 과정이므로 dropped 클래스가 추가됨)
    // 그리고 자신의 상위인 tr태그에 위에서 정규화된 tr_id를 id속성에 추가하며 배경색을 변경한다.
    this_td.toggleClass('dropped');
    this_td.closest('tr').attr('id', tr_id);
    this_td.css("background-color", colorArray[colorArrayIndex]);


    // 수업의 시간표에 대응되는 셀에 색깔을 칠해줌
    startTimeAndIndex = firstClassStratTime + firstClassDayIndex;
    endTimeAndIndex = firstClassEndTime + firstClassDayIndex;
    paintCells();

    if (!(typeof secondClassInfo == "undefined")) {
      startTimeAndIndex = secondClassStratTime + secondClassDayIndex;
      endTimeAndIndex = secondClassEndTime + secondClassDayIndex;
      paintCells();
    }

    //배열에 12가지 색상을 circularly하게 접근.
    colorArrayIndex = (colorArrayIndex + 1) % 12;
  }
  else {
    // 이미 수업을 선택한 경우 테이블에서 제거 (셀 색깔 제거)
    this_td.toggleClass('dropped');
    this_td.closest('tr').removeAttr('id');
    this_td.removeAttr('style');

    startTimeAndIndex = firstClassStratTime + firstClassDayIndex;
    endTimeAndIndex = firstClassEndTime + firstClassDayIndex;
    resetCells();

    if (!(typeof secondClassInfo == "undefined")) {
      startTimeAndIndex = secondClassStratTime + secondClassDayIndex;
      endTimeAndIndex = secondClassEndTime + secondClassDayIndex;
      resetCells();
    }
  }



  ///////////////   staticBinding 내부 함수   ///////////////

  function setFirstClass(){
    // 첫 번째 수업의 수업 요일 및 수업시작과 종료시간
    firstClassDay = firstClassInfo.substring(0, 1)
    firstClassDayIndex = 0;
    firstClassStratTime = firstClassInfo.substring(1, 6);
    firstClassEndTime = firstClassInfo.substring(7, 12);

    // 요일을 정수로 변환
    switch (firstClassDay) {
      case "월":
        firstClassDayIndex = 1;
        break;
      case "화":
        firstClassDayIndex = 2;
        break;
      case "수":
        firstClassDayIndex = 3;
        break;
      case "목":
        firstClassDayIndex = 4;
        break;
      case "금":
        firstClassDayIndex = 5;
        break;
      default:
    }
  }


  function setSecondClass(){
    // 두 번째 수업의 수업 요일 및 수업시작과 종료시간
    secondClassDay = secondClassInfo.substring(1, 2)
    secondClassDayIndex = 0;
    secondClassStratTime = secondClassInfo.substring(2, 7);
    secondClassEndTime = secondClassInfo.substring(8, 13);

    // 요일을 정수로 변환
    switch (secondClassDay) {
      case "월":
        secondClassDayIndex = 1;
        break;
      case "화":
        secondClassDayIndex = 2;
        break;
      case "수":
        secondClassDayIndex = 3;
        break;
      case "목":
        secondClassDayIndex = 4;
        break;
      case "금":
        secondClassDayIndex = 5;
        break;
      default:
    }
  }


  function checkRepeat(){
    point_tr = $('#' + startTimeAndIndex).closest('tr');
    point_td = $('#' + startTimeAndIndex).closest('td');

    // 다른 수업과 시간이 중복되는지 검사.
    while (true) {
      present_id = $('tr').eq(point_tr.index()).find('td').eq(point_td.index()).attr('id');
      if ($('#' + present_id).is('.dropped')) {
        alert($('#cellName' + present_id).attr('value') + " 과목/일정과 중복됩니다.");
        throw new Error();
      }

      // 검사중인 강의 시간이 13:30 ~ 15:00 일 경우 next_id == 15:00 까지 검사를 해야 한다.
      // 즉 present_id == 14:30 에서 종료를 하는데, 그 이유는 14:30의 영역이 14:30 ~ 15:00까지 이기 때문이다.
      next_id = $('tr').eq(point_tr.index()).next().find('td').eq(point_td.index()).attr('id');
      if (next_id == endTimeAndIndex){
        break;
      }
      point_tr = $(point_tr.next('tr'));
    }
  }


  function paintCells(){
    point_tr = $('#' + startTimeAndIndex).closest('tr');
    point_td = $('#' + startTimeAndIndex).closest('td');
    // 테이블의 칼럼을 저장하기 위한 변수
    count_column = 1;

    // 선택한 수업에 대응되는 모든 셀에 dropped 클래스를 추가하고 그 셀들을 테이블에서 뺀다.
    while (true) {
      present_id = $('tr').eq(point_tr.index()).next().find('td').eq(point_td.index()).attr('id');
      if (present_id == endTimeAndIndex){
        break;
      }
      $('#' + present_id).toggleClass('dropped');
      $('#' + present_id).attr('style', 'display:none');
      $('#' + present_id).append("<input type='text' id='ttcell" + present_id + "' name='ttcell[" + present_id + "]' value='1' style='display:none'>");
      $('#' + present_id).append("<input type='text' id='cellName" + present_id + "' value='" + this_td.attr('name') + "' style='display:none'>");
      point_tr = $(point_tr.next('tr'));
      count_column++;
    }

    // 셀 빈자리에 색깔이 칠해진 셀로 변경한다.
    point_td.toggleClass('dropped');
    point_td.attr('rowspan', count_column);
    point_td.text(this_td.attr('name'));
    point_td.attr('title', this_td.attr('id'));
    point_td.append("<input type='text' id='ttcell" + startTimeAndIndex + "' name='ttcell[" + startTimeAndIndex + "]' value='1' style='display:none'>");
    point_td.append("<input type='text' id='cellName" + startTimeAndIndex + "' name='cellName[" + startTimeAndIndex + "][" + count_column + "][0]["
                       + colorArray[colorArrayIndex] + "]' value='" + this_td.attr('name') + "' style='display:none'>");
    point_td.css("background-color", colorArray[colorArrayIndex]);
  }


  function resetCells(){
    point_tr = $('#' + startTimeAndIndex).closest('tr');
    point_td = $('#' + startTimeAndIndex).closest('td');
    count_column = 2;

    // 선택된 시간에 해당하는 모든 셀을 지워 원래의 시간표로 리셋 한다.
    while (true) {
      present_id = $('tr').eq(point_tr.index()).next().find('td').eq(point_td.index()).attr('id');
      if (present_id == endTimeAndIndex){
        break;
      }
      $('#' + present_id).toggleClass('dropped');
      $('#' + present_id).removeAttr('style');
      $('#ttcell' + present_id).remove();
      point_tr = $(point_tr.next('tr'));
      count_column++;
    }

    point_td.toggleClass('dropped');
    point_td.removeAttr('rowspan');
    point_td.removeAttr('title');
    point_td.empty();
    $('#ttcell' + startTimeAndIndex).remove();
    $('#cellName' + startTimeAndIndex).remove();
    point_td.removeAttr('style');
  }
}



function dynamicBinding() {
  // 드래그 우하단(영역이 끝나는 지점) 셀의 위치를 저장
  endPoint = $(this);
  endRowIndex = endPoint.closest('tr').index();
  endColIndex = endPoint.closest('td').index();

  // 빈 셀을 선택할 경우
  if (!startPoint.is('.dropped')) {
    dragRowLength = Math.abs(endRowIndex - startRowIndex) + 1;
    dragColLength = Math.abs(endColIndex - startColIndex) + 1;

    setStartPointAndCellName();
    checkRepeat();
    createDragShapeCell();
    deleteRemainCells();


    ///////////////   dynamicBinding 내부 함수   ///////////////

    function setStartPointAndCellName(){
      // startPoint를 드래그의 좌상단 셀을 가르키도록 한다.
      // case1. 좌하단에서 우상단 드래그
      if ((startRowIndex > endRowIndex) && (startColIndex < endColIndex)) {
        startPoint = endPoint.closest('td');
        for (i = 1; i < dragColLength; i++) {
          startPoint = startPoint.prev('td');
        }
      }
      // case2. 우상단에서 좌하단 드래그
      else if ((startRowIndex < endRowIndex) && (startColIndex > endColIndex)) {
        startPoint = startPoint.closest('td');
        for (i = 1; i < dragColLength; i++) {
          startPoint = startPoint.prev('td');
        }
      }
      // case3. 같은 행의 좌측방향 드래그  또는  같은 열의 상단방향 드래그
      else if (((startRowIndex == endRowIndex) && (startColIndex > endColIndex)) || ((startRowIndex > endRowIndex) && (startColIndex == endColIndex))) {
        temp = startPoint;
        startPoint = endPoint;
        endPoint = temp;
      }

      inputName = prompt('일정의 이름을 입력해주세요. (2글자 이상)');
      if (inputName.length < 2){
        while(true){
          inputName = prompt('일정의 이름을 입력해주세요. (2글자 이상)');
          if(inputName.length >= 2){
            break;
          }
        }
      }
    }

    function checkRepeat(){
      point_tr = startPoint.closest('tr');
      point_td = startPoint.closest('td');

      // endPoint_id = $('tr').eq(endRowIndex).find('td').eq(endColIndex).attr('id');

      countCol = 0;
      while (countCol < dragColLength) {
        countRow = 0;
        while (countRow < dragRowLength) {
          present_id = $('tr').eq(point_tr.index()).find('td').eq(point_td.index()).attr('id');
          if ($('#' + present_id).is('.dropped')) {
            alert($('#cellName' + present_id).attr('value') + " 과목/일정과 중복됩니다.");
            throw new Error();
          }

          // next_id = $('tr').eq(point_tr.index()).next().find('td').eq(point_td.index()).attr('id');
          // if (next_id == endPoint_id){
          //   break;
          // }

          countRow++;
          point_tr = $(point_tr.next('tr'));
        }
        countCol++;
        point_tr = startPoint.closest('tr');
        point_td = $(point_td.next('td'));
      }
    }

    function createDragShapeCell(){
      // 드래그 영역에 맞는 하나의 큰 셀을 생성 (기존에 있던 셀들은 우측으로 밀린다.)
      // startPoin가 가르키는 셀은 제외된 상태로 셀이 확장된다.
      // 예를들어 rowspan = 3 일 경우 startPoint 셀을 제외한 2개의 row만 추가되고, colspan = 3 일 경우는 정상적으로 3개의 col이 추가됨.
      $(startPoint).attr('rowspan', dragRowLength).attr('colspan', dragColLength).toggleClass('dropped').text(inputName);

      $(startPoint).append("<input type='text' id='ttcell" + $(startPoint).attr('id') + "' name='ttcell["
                              + $(startPoint).attr('id') + "]' value='1' style='display:none'>");

      $(startPoint).append("<input type='text' id='cellName" + $(startPoint).attr('id') + "' name='cellName["
                              + $(startPoint).attr('id') + "][" + $(startPoint).attr('rowspan') + "][" + $(startPoint).attr('colspan')
                                + "][" + colorArray[colorArrayIndex] + "]' value='" + $(startPoint).text() + "' style='display:none'>");

      $(startPoint).css("background-color", colorArray[colorArrayIndex]);
      colorArrayIndex = (colorArrayIndex + 1) % 12;
    }


    function deleteRemainCells(){
      // 통합된 셀을 추가하는 과정에서 밀려난 셀들을 제거
      countCol = 0;
      point_td = startPoint.closest('td');
      while (countCol < dragColLength) {
        if(countCol === 0){
          point_tr = startPoint.closest('tr').next('tr');
          countRow = 1;
        }
        else{
          point_tr = startPoint.closest('tr');
          countRow = 0;
        }
        while (countRow < dragRowLength) {
          cellID = $('tr').eq(point_tr.index()).find('td').eq(point_td.index()).attr('id');
          timeOfCell = cellID.substring(0, cellID.length - 1);
          dayOfCell = cellID.substring(cellID.length - 1, cellID.length);
          timeAndInex = timeOfCell + dayOfCell;
          $('#' + timeAndInex).attr('style', 'display:none');
          $('#' + timeAndInex).toggleClass('dropped')
          $('#' + timeAndInex).append("<input type='text' id='ttcell" + $('#' + timeAndInex).attr('id')
                                        + "' name='ttcell[" + $('#' + timeAndInex).attr('id') + "]' value='1' style='display:none'>");
          $('#' + timeAndInex).append("<input type='text' id='cellName" + $('#' + timeAndInex).attr('id')
                                        + "' value='" + $(startPoint).text() + "' style='display:none'>");
          countRow++;
          point_tr = $(point_tr.next('tr'));
        }
        countCol++;
        point_td = $(point_td.next('td'));
      }
    }

  }


  // 일정이 있는 셀을 선택한 경우
  else {
    // staticBinding을 통해 시간표를 등록한 경우
    if (typeof startPoint.attr('title') != "undefined") {
      if($(startPoint).attr("id") == $(endPoint).attr("id")){
        tr_id = startPoint.attr('title').replace(/:/g, '_');
        tr_id = tr_id.replace(/[\(\~, )]/g, '');
        var tdDelete = $("#" + tr_id).children('td')
        staticBinding.call(tdDelete);
      }
      else{
        alert($('#cellName' + present_id).attr('value') + " 과목/일정과 중복됩니다.");
        throw new Error();
      }
    }
    // dynamicBinding을 통해 시간표를 등록한 경우
    else {
      if($(startPoint).attr("id") != $(endPoint).attr("id")){
        alert($('#cellName' + present_id).attr('value') + " 과목/일정과 중복됩니다.");
        throw new Error();
      }
      // 일정에 해당하는 셀들을 제거 (사라진 셀 만큼 테이블은 셀이 사라진 상태다.)
      create_row = $(startPoint).attr('rowspan');
      create_col = $(startPoint).attr('colspan');
      $(startPoint).removeAttr('rowspan');
      $(startPoint).removeAttr('colspan');
      $(startPoint).toggleClass('dropped');
      $(startPoint).empty();
      $(startPoint).removeAttr('style');
      $('#ttcell' + startPoint.attr('id')).remove();
      $('#cellName' + startPoint.attr('id')).remove();

      // 테이블에서 사라진 셀들을 채워넣음 (사실은 셀에 적용된 display: none을 해제한다.)
      countCol = 0;
      point_td = $(this).closest('td');
      while (countCol < create_col) {
        if(countCol == 0){
          point_tr = $(this).closest('tr').next('tr');
          countRow = 1;
        }else{
          point_tr = $(this).closest('tr');
          countRow = 0;
        }
        while (countRow < create_row) {
          cellID = $('tr').eq(point_tr.index()).find('td').eq(point_td.index()).attr('id');
          timeOfCell = cellID.substring(0, cellID.length - 1);
          dayOfCell = cellID.substring(cellID.length - 1, cellID.length);
          $('#' + timeOfCell + dayOfCell).removeAttr('style');
          $('#' + timeOfCell + dayOfCell).toggleClass('dropped')
          $('#ttcell' + timeOfCell + dayOfCell).remove();
          countRow++;
          point_tr = $(point_tr.next('tr'));
        }
        countCol++;
        point_td = $(point_td.next('td'));
      }

    }
  }
}

</script>
